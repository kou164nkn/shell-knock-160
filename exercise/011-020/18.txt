$ declare -A x ; IFS=: ; while read {a..g} ; do [ "$g" = "" ] || x[$g]+=. ; done < /etc/passwd ; for s in ${!x[@]} ; do echo $s ${#x[$s]}; done ; unset x
/bin/bash 2
/bin/sync 2
/usr/sbin/nologin 34


# 処理ごとに内容を確認

# ① (-A オプション)で連想配列 x を作成し、区切り文字を : に変更
$ declare -A x ; IFS=:

# ② 変数 a~g を用意して /etc/passwd 各フィールド毎に読み込む (/etc/passwd は 7 フィールド存在)
#    ログインシェル名を鍵として、値に . を追加する。後ほど . の数で集計を行う
#    ログインシェルのフィールドが空の場合、空の鍵に要素を追加しようとして、エラーが出るため、テストコマンドでガードする
#    この時 "$g" としているのは、 $g が空の場合 [ = "" ] となり式が成り立たなくなるのを防ぐため
#    また {a..g} はシーケンス式であり、 a b c d e f g と解釈される
$ while read {a..g}; do [ "$g" = "" ] || x[$g]+=. ; done < /etc/passwd


# ③ for ループ内で ${!x[@]} で取得した連想配列の鍵を変数 s に格納する (参考: ! を付けずに ${x[@]} とした場合は連想配列の要素が取得できる)
#    ${#x[$s]} によって各要素の文字列長を出力する ( ${!var} で変数の値の文字列長を出力 )
#    unset で変数を消去する
$ for s in $[!x[@}]}; do echo $s $[#x[$s]] done; unset x